git 命令
git init
git config --global user.name "liulongyun"
git config --global user.email "liulongyunwanfeng@163.com"
git add xxx.text
git commit -m "初始导入"
git status
git diff
git log --pretty=oneline
git reset --hard "HEAD^"
git reset --hard 版本号
git reflog             用来记录你的每一次命令
git check -- file  从暂存区间指定的文件覆盖工作区里的文件
git reset HEAD <file>  将指定文件在暂存区的版本回退到之前一版本（这个命令作用对象是暂存区里的文件）

git reset --hard "HEAD^"
git reset --hard 版本号
这两个是将工作区里的文件回退到已经提交到分枝上的对于的版本（将分支上的对应得版本覆盖到工作区，和暂存区没关系）

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


git 删除文件
1：确实要删除文件
删除也是一个修改操作，你删除之后 add commit 即可
2：有一些工程文件我们不是要删除，而是不想git 管理它，但是之前因为没注意，将其纳入了git管理了，怎么办
用 git rm filename删除，再commit



git远程仓库学习（以github为例）
注册git账户

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

在github上创建远程仓库（如仓库地址为：git@github.com:michaelliao/learngit.git）

将本地库和远程库关联
在本地库目录下执行
$ git remote add origin git@github.com:michaelliao/learngit.git


把本地库的所有内容推送到远程库上：
$ git push -u origin master

把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
以后推送远程就可以直接用
$ git push  origin master

git 克隆
假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。

$ git clone git@github.com:michaelliao/gitskills.git


git分支学习
学习连接
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000

相关命令
创建分支(dev分支)
$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev（创建dev分支）
$ git checkout dev（切换到dev分支）
Switched to branch 'dev'

用git branch 查看所有分支，当前分支钱还有*
$ git branch
* dev
  master

切换分支
git checkout dev（需要切换到的分支）

合并分支
git merge dev
将值得的分支（dev）合并到当前分支上

直接这样合并，查询不到合并日志，因为合并的时候没有创建提交日志
git merge --no-ff dev
添加 --no-ff参数表示不使用快速模式合并，会在合并的时候创建一个提交记录，以后查看日志的时候能查看到分支合并日志

git log --graph——以图表形式查看分支

删除git分支
$ git branch -d dev

git分支合并解决冲突
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，然后再提交。

学习资料
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000



git commit --amend——修改提交信息
要修改上一条提交信息，可以使用git commit --amend命令。执行上面的命令后，编辑器就会启动。
feature-B上修改
update on feature-c




